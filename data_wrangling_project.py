# -*- coding: utf-8 -*-
"""Nguyen_Ngoc_Yen_data_wrangling_project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJpSZVFnxXX1ENe6HQDhtR7dpEWawcSt

connect with google drive
"""

from google.colab import files
import pandas as pd
import numpy as np

# Upload file "sales.csv"
uploaded = files.upload()
sales = pd.read_csv('sales.csv')

# Upload file "prices.csv"
uploaded = files.upload()
prices = pd.read_csv('prices.csv')

"""connect with google drive"""

print("Sales data:")
print(sales)
print("Prices data:")
print(prices)

# Check null in sales
sales.isna().sum()

# Check null in prices
prices.isna().sum()

"""Calculating the total revenue of each product at each price"""

#convert ordered_at, updated_at,to datetime object

sales['ordered_at'] = pd.to_datetime(sales['ordered_at'])
prices['updated_at'] = pd.to_datetime(prices['updated_at'])

sales = sales.sort_values(by='ordered_at')
sales

prices = prices.sort_values(by='updated_at')
prices

# use merge_asof with direction='nearest' to merge sales and prices
merge_nearest = pd.merge_asof(sales, prices, left_on='ordered_at', right_on='updated_at', by='product_id', direction='nearest')

# compare ordered_at and "nearest" updated_at of each order to find the correct price

merge_nearest['final_price'] = np.where(merge_nearest['ordered_at'] >= merge_nearest['updated_at'],
                                         merge_nearest['new_price'], merge_nearest['old_price'])

merge_nearest['revenue'] = merge_nearest['quantity_ordered'] * merge_nearest['final_price']
total_revenue = merge_nearest.groupby('product_id', as_index=False)['revenue'].sum()
total_revenue

merge_nearest['revenue'] = merge_nearest['quantity_ordered'] * merge_nearest['final_price']
revenue_by_product_and_price = merge_nearest.groupby(['product_id', 'final_price'], as_index=False)['revenue'].sum()
revenue_by_product_and_price

# use merge_asof to find new price for each item ordered

merge_backward = pd.merge_asof(sales, prices, left_on='ordered_at', right_on='updated_at', by='product_id')
merge_backward.head()

# fill null values for the orders made before the first update of each product
# after filling, new_price column is the price we need
merge_backward['final_price'] = np.where(merge_backward['new_price'].isnull(), merge_backward['old_price'], merge_backward['new_price'])
merge_backward['revenue'] = merge_backward['quantity_ordered'] * merge_backward['final_price']
merge_backward.head()

revenue_by_product_and_price = merge_backward.groupby(['product_id', 'final_price'], as_index=False)['revenue'].sum()
revenue_by_product_and_price

revenue_by_product = merge_backward.groupby('product_id', as_index=False)['revenue'].sum()
revenue_by_product